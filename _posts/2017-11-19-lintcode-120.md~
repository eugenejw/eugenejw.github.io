---
layout: post
comments: true
description: BFS and DFS
date: 2017-11-18 19:51:00
title: Graph Valid Tree
category: Coding
tags: [Algorithm, Tree, Graph, BFS, DFS, Lintcode, Medium, Python]
---

**Description**
[Lintcode 178](http://www.lintcode.com/en/problem/graph-valid-tree/)
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Notice,
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Example
Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

## Python BFS
```python
from collections import (deque, defaultdict)
class Solution:
    """
    @param: n: An integer
    @param: edges: a list of undirected edges
    @return: true if it's a valid tree, or false
    """
    def validTree(self, n, edges):
        # write your code here
        if len(edges) != n-1:
            return False
            
        mapping = defaultdict(list)
        for a, b in edges:
            mapping[a].append(b)
            mapping[b].append(a)
        
        queue = deque()
        queue.append(0)
        visited = set()
        
        while len(queue) != 0:
            curNode = queue.popleft();
            visited.add(curNode)
            for neighbor in mapping.get(curNode, []):
                if neighbor not in visited:
                    queue.append(neighbor)
                    
        return len(visited) == n
    
    # Total Runtime: 969 ms
    # 100% test cases passed.   
            
```

## Python DFS 


```python
from collections import defaultdict
class Solution:
    """
    @param: n: An integer
    @param: edges: a list of undirected edges
    @return: true if it's a valid tree, or false
    """
    def validTree(self, n, edges):
        # write your code here
        if len(edges) != n - 1:
            return False
            
        if not edges:
            return n == 1
            
        neighbors = defaultdict(set)
        for a, b in edges:
            neighbors[a].add(b)
            neighbors[b].add(a)

        visited = set()       
        self.dfs(0, neighbors, visited)
        # print self.ret, visited

        return len(visited) == n
                
    def dfs(self, node, neighbors, visited):
        visited.add(node)
        for neighbor in neighbors[node]:
            if neighbor not in visited:
                self.dfs(neighbor, neighbors, visited)
                
    # Total Runtime: 1177 ms
    # 100% test cases passed.
```

