---
layout: post
date: 2017-07-24 19:41:00
title: Permutations (leetcode 46)
category: Coding
tags: [Algorithm, Permutations, leetcode, Medium, Python]
---

**Description**,
Given a collection of distinct numbers, return all possible permutations.
[the leetcode link](https://leetcode.com/submissions/detail/111055225/)

For example,
[1,2,3] have the following permutations:
```python
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
```


### Recursive solution
The trick is to "fix" each number in the list, then recursively doing so to the rest of the list.
When it reaches the last one, just return it.
Note: to make the code looks more concise, I let list reach empty instead of length of 1.

```python
class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if not nums:
            return [[]]
        ret = []
        for i in xrange(len(nums)):
            for tmpList in self.permute(nums[:i] + nums[i+1:]):
                ret.append([nums[i]] + tmpList)
        return ret
```

![img]({{ site.baseurl | prepend:site.url}}/images/46_python.jpg){: .center-image }*Runtime: 65ms*
