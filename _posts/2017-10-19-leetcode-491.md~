---
layout: post
comments: true
description: Another backtracking along with DFS
date: 2017-10-16 19:51:00
title:  Generate Parentheses
category: Coding
tags: [Algorithm, DFS, String, Leetcode, Medium, Python]
---

**Description**

[22. Generate Parentheses](https://leetcode.com/problems/generate-parentheses/description/)
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

```python
For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
```

## Backtracking with DFS O(2^n) solution
This is a classic backtracking problem.

Like pre-order DFS along a binary tree. You first find the possible 3 nodes(3-digit numbers), then DFS them.
```python
class Solution(object):
    def __init__(self):
        self.ret = []
        
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        self.dfs(n, n, n, 0, [], 0)
        return self.ret
        
        
    def dfs(self, n, left, right, curSum, path, level):
        if curSum<0:
            return
        if level==n*2:
            self.ret.append("".join(path))
            return
        
        if left:
            path.append("(")
            self.dfs(n, left-1, right, curSum+1, path, level+1)
            path.pop()
        if right:
            path.append(")")
            self.dfs(n, left, right-1, curSum-1, path, level+1)
            path.pop()
        
                                    
```

![img]({{ site.baseurl | prepend:site.url}}/images/22_python.jpg){: .center-image }*Runtime: around 42ms*
