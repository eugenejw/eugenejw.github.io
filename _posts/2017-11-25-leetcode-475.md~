---
layout: post
comments: true
description: Intersting Post-order DFS problem.
date: 2017-11-23 19:51:00
title: Binary Tree Longest Consecutive Sequence II
category: Coding
tags: [Algorithm, Post Order, DFS, Tree, Leetcode, Medium, Java]
---

**Description**

[549. Binary Tree Longest Consecutive Sequence II](https://leetcode.com/problems/binary-tree-longest-consecutive-sequence-ii/description/)
Given a binary tree, you need to find the length of Longest Consecutive Path in Binary Tree.

Especially, this path can be either increasing or decreasing. For example, [1,2,3,4] and [4,3,2,1] are both considered valid, but the path [1,2,4,3] is not valid. On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.

```java
Example 1:
Input:
        1
       / \
      2   3
Output: 2
```
Explanation: The longest consecutive path is [1, 2] or [2, 1].
```java
Example 2:
Input:
        2
       / \
      1   3
Output: 3
```
Explanation: The longest consecutive path is [1, 2, 3] or [3, 2, 1].
Note: All the values of tree nodes are in the range of [-1e7, 1e7].

## Python post-order DFS
The information passed from bottom to top uses more than one variable. So a return class is used.

```python
"""
Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None
"""

class ReturnVal(object):
    def __init__(self, asc, des):
        self.asc = asc
        self.des = des
        
class Solution:
    """
    @param: root: the root of binary tree
    @return: the length of the longest consecutive sequence path
    """
    def __init__(self):
        self.ret = 0
        
    def longestConsecutive2(self, root):
        # write your code here
        self.dfs(root)
        return self.ret
        
    def dfs(self, root):
        if not root:
            return ReturnVal(0, 0)
            
        left = self.dfs(root.left)
        right = self.dfs(root.right)
        
        if root.left:
            if root.left.val - root.val == 1: #descending
                left.asc = 0
            elif root.left and root.left.val - root.val == -1: # ascending
                left.des = 0
            else:
                left.asc = left.des = 0
            
        if root.right:
            if root.right.val - root.val == 1: #descending
                right.asc = 0
            elif root.right.val - root.val == -1: # ascending
                right.des = 0
            else:
                right.asc = right.des = 0
            
        
        if left.asc != 0 and right.des != 0:
            self.ret = max(self.ret, left.asc + right.des + 1)
        elif left.des != 0 and right.asc != 0:
            self.ret = max(self.ret, left.des + right.asc + 1)
        else:
            self.ret = max(self.ret,
                            1 + max(max(left.asc, left.des),
                                    max(right.des, right.asc))
                        )
        return ReturnVal(max(left.asc, right.asc) + 1, max(left.des, right.des) + 1)
        # Total Runtime: 756 ms
        # 100% test cases passed.
        
```

## Java Post-order DFS O(n) solution

Post-order tree traversal using global counter.
For each parent-node/child-node pair, it could be in ascending order or in descending order. So we return an two-element array to record the accumulative result of them.

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private int ret = 0;   
    public int longestConsecutive(TreeNode root) {
        dfs(root);
        return ret;
    }

    private int[] dfs(TreeNode root) {
        if (root==null) return new int[] {0, 0}; // {ascending, descending}
        int leftAsc = 1, leftDes = 1;
        int rightAsc = 1, rightDes = 1;
        if (root.left!=null) {
            int[] left = dfs(root.left);
            if (root.val+1==root.left.val) {
                 leftAsc = left[0] + 1;
            }
            else if (root.val-1==root.left.val) {
                 leftDes = left[1] + 1;
            }

        }
        
        if (root.right!=null) {
            int[] right = dfs(root.right);
            if (root.val+1==root.right.val) {
                 rightAsc = right[0] + 1;
            }
            else if (root.val-1==root.right.val) {
                 rightDes = right[1] + 1;
            }
        }
        
        int asc = Math.max(leftAsc, rightAsc);
        int des = Math.max(leftDes, rightDes);
        
        ret = Math.max((asc + des - 1), ret);
        return new int[] {asc, des};
    }
}
```

![img]({{ site.baseurl | prepend:site.url}}/images/549_java.jpg){: .center-image }*Runtime: around 16ms*
